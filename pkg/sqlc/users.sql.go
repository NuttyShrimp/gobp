// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package sqlc

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, email, uid)
VALUES ($1, $2, $3)
RETURNING id, name, email, uid
`

type CreateUserParams struct {
	Name  string
	Email string
	Uid   string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Name, arg.Email, arg.Uid)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Uid,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, name, email, uid
FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Uid,
	)
	return i, err
}

const getUserByUid = `-- name: GetUserByUid :one
SELECT id, name, email, uid
FROM users
WHERE uid = $1 LIMIT 1
`

func (q *Queries) GetUserByUid(ctx context.Context, uid string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUid, uid)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Uid,
	)
	return i, err
}
