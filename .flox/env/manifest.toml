## Flox Environment Manifest -----------------------------------------
##
##   _Everything_ you need to know about the _manifest_ is here:
##
##               https://flox.dev/docs/concepts/manifest
##
## -------------------------------------------------------------------
# Flox manifest version managed by Flox CLI
version = 1


## Install Packages --------------------------------------------------
##  $ flox install gum  <- puts a package in [install] section below
##  $ flox search gum   <- search for a package
##  $ flox show gum     <- show all versions of a package
## -------------------------------------------------------------------
[install]
go = { pkg-path = "go", version = "^1.24.2" }
nodejs = { pkg-path = "nodejs", version = "22.11.0" }
pnpm = { pkg-path = "pnpm", version = "^9.12.3" }
postgresql_16.pkg-path = "postgresql_16"


## Environment Variables ---------------------------------------------
##  ... available for use in the activated environment
##      as well as [hook], [profile] scripts and [services] below.
## -------------------------------------------------------------------
[vars]
PGHOSTADDR = "127.0.0.1"
PGUSER = "postgres"
PGPASS = "password"
PGDATABASE = "auth"
PGPORT = "5434"
DB_PORT = "5434"


## Activation Hook ---------------------------------------------------
##  ... run by _bash_ shell when you run 'flox activate'.
## -------------------------------------------------------------------
[hook]
on-activate = '''
  # Point GOENV to Flox environment cache
  export GOENV="$FLOX_ENV_CACHE/goenv"

  # Install Go dependencies
  go get .

  cd ui
  pnpm i
  cd ..

  # Setup PG
  export PGDIR="$FLOX_ENV_CACHE/postgres"
  export PGDATA=$PGDIR/data
  export PGHOST=$PGDIR/run
  export PGCONFIGFILE="$PGDIR/postgresql.conf"

  if [[ ! -d "$PGHOST" ]]; then
    mkdir -p "$PGHOST"
  fi

  if [[ ! -d "$PGDATA" ]]; then
    mkdir -p "$PGDATA"
    pg_initdb() {
      initdb "$PGDATA" \
        --locale=C \
        --encoding=UTF8 \
        -A md5 \
        --auth=trust \
        --username $PGUSER \
        --pwfile=<(echo $PGPASS)
    }
    pg_initdb
    echo "✅ Initialize PostgreSQL ($PGDATA)"

  fi

  if [[ ! -f "$PGCONFIGFILE" ]]; then
    tee -a $PGCONFIGFILE > /dev/null << EOF
listen_addresses = '$PGHOSTADDR';
port = '$PGPORT';
unix_socket_directories = '$PGHOST';
unix_socket_permissions = '0700';
EOF
    echo "✅ Configure PostgreSQL ($PGCONFIGFILE)"
  fi

  pg_ctl -D "$PGDATA" -w start -o "-c unix_socket_directories=$PGHOST -c listen_addresses=$PGHOSTADDR -p $PGPORT" > /dev/null
  if psql -lqt | cut -d \| -f 1 | grep -qw $PGDATABASE; then
    echo "✅ Database '$PGDATABASE' already exists"
  else
    createdb
    echo "✅ Database '$PGDATABASE' created"
  fi
  pg_ctl -D "$PGDATA" -m fast -w stop > /dev/null
'''


## Profile script ----------------------------------------------------
## ... sourced by _your shell_ when you run 'flox activate'.
## -------------------------------------------------------------------
[profile]
# common = '''
#   gum style \
#   --foreground 212 --border-foreground 212 --border double \
#   --align center --width 50 --margin "1 2" --padding "2 4" \
#     $INTRO_MESSAGE
# '''
## Shell specific profiles go here:
# bash = ...
# zsh  = ...
# fish = ...


## Services ----------------------------------------------------------
##  $ flox services start             <- Starts all services
##  $ flox services status            <- Status of running services
##  $ flox activate --start-services  <- Activates & starts all
## -------------------------------------------------------------------
[services]
[services.database]
command = "postgres -D $PGDATA -c unix_socket_directories=$PGHOST -c listen_addresses=$PGHOSTADDR -p $PGPORT"
[services.server]
command = "make watch"
[services.ui]
command = "cd ui && pnpm run dev"


## Other Environment Options -----------------------------------------
[options]
# Systems that environment is compatible with
systems = [
  "aarch64-darwin",
  "aarch64-linux",
  "x86_64-darwin",
  "x86_64-linux",
]
